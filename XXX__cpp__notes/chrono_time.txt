time via chrono.h


REFERENCES

https://stackoverflow.com/questions/31552193/difference-between-steady-clock-vs-system-clock




#include <chrono>

chrono offers std::system_clock or std::steady_clock. 


rule of thumb

 - Don't use count().

and a corollary:
 - Don't use time_since_epoch().


better approach:
    auto now = steady_clock::now();

comparison is e.g. as follows:
bool is_old = minutes{2} < now - data_holder->getTimestamp();

e.g.:
    #include <chrono>
    #include <cstdint>
    #include <memory>

    struct DataHolder
    {
        std::chrono::system_clock::time_point
        getTimestamp()
        {
            using namespace std::chrono;
            return system_clock::time_point{milliseconds{1437520382241}};
        }
    };

    int
    main()
    {
        using namespace std;
        using namespace std::chrono;
        auto data_holder = std::unique_ptr<DataHolder>(new DataHolder);

        auto now = system_clock::now();
        bool is_old = minutes{2} < now - data_holder->getTimestamp();
    }



Q:
what is the difference between std::system_clock and std::steady_clock

A:
if you're holding a system_clock in your hand, you would call it a
watch, and it would tell you what time it is.

if you're holding a steady_clock in your hand, you would call it a
stopwatch, and it would tell you how fast someone ran a lap, but it
would not tell you what time it is.
