casting

REFERENCES
https://stackoverflow.com/questions/332030/when-should-static-cast-dynamic-cast-const-cast-and-reinterpret-cast-be-used




variable = const_cast< char * >("foobar"); // POSSIBLE - complete variable

ref: https://en.cppreference.com/w/cpp/language/const_cast

const_cast can be used to remove or add const to a variable

NB: Pointers to functions and pointers to member functions are not
    subject to const_cast





static_cast< new_type >( expression )

ref: https://en.cppreference.com/w/cpp/language/static_cast

static_cast is the first cast you should attempt to use. It does
things like implicit conversions between types (such as int to float,
or pointer to void*), and it can also call explicit conversion
functions (or implicit ones). In many cases, explicitly stating
static_cast isn't necessary, but it's important to note that the
T(something) syntax is equivalent to (T)something and should be
avoided (more on that later). A T(something, something_else) is safe,
however, and guaranteed to call the constructor.

static_cast can also cast through inheritance hierarchies. It is
unnecessary when casting upwards (towards a base class), but when
casting downwards it can be used as long as it doesn't cast through
virtual inheritance. It does not do checking, however, and it is
undefined behavior to static_cast down a hierarchy to a type that
isn't actually the type of the object.





dynamic_cast< new_type >( expression )

ref: https://en.cppreference.com/w/cpp/language/dynamic_cast

dynamic_cast is exclusively used for handling polymorphism. You can
cast a pointer or reference to any polymorphic type to any other class
type (a polymorphic type has at least one virtual function, declared
or inherited). You can use it for more than just casting downwards –
you can cast sideways or even up another chain. The dynamic_cast will
seek out the desired object and return it if possible. If it can't, it
will return nullptr in the case of a pointer, or throw std::bad_cast
in the case of a reference.

dynamic_cast has some limitations, though. It doesn't work if there
are multiple objects of the same type in the inheritance hierarchy
(the so-called 'dreaded diamond') and you aren't using virtual
inheritance. It also can only go through public inheritance - it will
always fail to travel through protected or private inheritance. This
is rarely an issue, however, as such forms of inheritance are rare.





reinterpret_cast< type >()

ref: https://en.cppreference.com/w/cpp/language/reinterpret_cast

reinterpret_cast is the most dangerous cast, and should be used very
sparingly. It turns one type directly into another — such as casting
the value from one pointer to another, or storing a pointer in an int,
or all sorts of other nasty things. Largely, the only guarantee you
get with reinterpret_cast is that normally if you cast the result back
to the original type, you will get the exact same value (but not if
the intermediate type is smaller than the original type). There are a
number of conversions that reinterpret_cast cannot do, too. It's used
primarily for particularly weird conversions and bit manipulations,
like turning a raw data stream into actual data, or storing data in
the low bits of a pointer to aligned data.
